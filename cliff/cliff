#!/bin/bash

# Cliff Startup Script (modernized for Bash)
# Shuts down any running backend/frontend, checks environment, then starts both

# Unset SSL_CERT_FILE to prevent SSL certificate errors with OpenAI client
unset SSL_CERT_FILE

echo "🤖 Starting Cliff AI Speech Assistant..."

# Kill any process using port 3000 (React dev server)
echo "[CLIFF] Checking for React dev server on port 3000..."
PID3000=$(lsof -i :3000 -t 2>/dev/null)
if [ ! -z "$PID3000" ]; then
  echo "[CLIFF] Killing React dev server (PID $PID3000)"
  kill -9 $PID3000
else
  echo "[CLIFF] No React dev server running."
fi

# Kill any process using port 5000 (Flask backend)
echo "[CLIFF] Checking for Flask backend on port 5000..."
PID5000=$(lsof -i :5000 -t 2>/dev/null)
if [ ! -z "$PID5000" ]; then
  echo "[CLIFF] Killing Flask backend (PID $PID5000)"
  kill -9 $PID5000
else
  echo "[CLIFF] No Flask backend running."
fi

# Use current Python environment (conda or system)
echo "🐍 Using current Python environment..."
echo "Python being used: $(which python)"
python --version

# Check if we're in the right directory
if [ ! -f "package.json" ] || [ ! -f "flask_backend.py" ]; then
    echo "❌ Error: Please run this script from the cliff directory"
    echo "   cd cliff && ./cliff"
    exit 1
fi

# Check for .env file
if [ ! -f "../.env" ]; then
    echo "❌ Error: .env file not found in project root"
    echo "   Please create ../.env file with OPENAI_API_KEY=your_key"
    exit 1
fi

# Check for Node.js
if ! command -v node &> /dev/null; then
    echo "❌ Error: Node.js not found"
    echo "   Please install Node.js from https://nodejs.org/"
    exit 1
fi

# Check for Python
if ! command -v python &> /dev/null; then
    echo "❌ Error: Python not found"
    echo "   Please install Python 3.8+"
    exit 1
fi

# Check if node_modules exists, install if not
if [ ! -d "node_modules" ]; then
    echo "📦 Installing React dependencies..."
    npm install
    if [ $? -ne 0 ]; then
        echo "❌ Error: Failed to install React dependencies"
        exit 1
    fi
fi

# Function to cleanup background processes
cleanup() {
    echo ""
    echo "🛑 Stopping Cliff..."
    if [ ! -z "$BACKEND_PID" ]; then
        kill $BACKEND_PID 2>/dev/null
        echo "   Backend stopped"
    fi
    if [ ! -z "$FRONTEND_PID" ]; then
        kill $FRONTEND_PID 2>/dev/null
        echo "   Frontend stopped"
    fi
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

echo "🚀 Starting Flask backend..."
python flask_backend.py &
BACKEND_PID=$!

# Wait a moment for backend to start
sleep 3

# Check if backend started successfully
if ! kill -0 $BACKEND_PID 2>/dev/null; then
    echo "❌ Error: Backend failed to start"
    exit 1
fi

echo "✅ Backend running on http://localhost:5000"

echo "🚀 Starting React frontend..."
npm start &
FRONTEND_PID=$!

# Wait a moment for frontend to start
sleep 5

# Check if frontend started successfully
if ! kill -0 $FRONTEND_PID 2>/dev/null; then
    echo "❌ Error: Frontend failed to start"
    kill $BACKEND_PID 2>/dev/null
    exit 1
fi

echo "✅ Frontend running on http://localhost:3000"
echo ""
echo "🎉 Cliff is ready!"
echo "   Open your browser to: http://localhost:3000"
echo "   Press Ctrl+C to stop"
echo ""

# Wait for user to stop
wait 